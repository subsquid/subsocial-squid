enum EventName {
  PostCreated
  PostDeleted
  PostUpdated
  PostShared
  PostMoved
  PostReactionCreated
  PostReactionUpdated
  PostReactionDeleted
  SpaceCreated
  SpaceUpdated
  SpaceFollowed
  SpaceUnfollowed
  AccountFollowed
  AccountUnfollowed
  ProfileCreated
  ProfileUpdated
}

enum PostKind {
  Comment
  SharedPost
  RegularPost
}
enum ReactionKind {
  Upvote
  Downvote
}

enum Status {
  Active
  Deleted
}

type Account @entity {
  id: ID!
  reputation: Int
  hasProfile: Boolean @index
  name: String
  avatar: String
  about: String
  createdAtBlock: BigInt
  createdAtTime: DateTime

  followers: [AccountFollowers]! @derivedFrom(field: "followingAccount")
  followersCount: Int

  followingAccounts: [AccountFollowers]! @derivedFrom(field: "followerAccount")
  followingAccountsCount: Int

  posts: [Post] @derivedFrom(field: "createdByAccount")

  spacesCreated: [Space!] @derivedFrom(field: "createdByAccount")
  spacesOwned: [Space!] @derivedFrom(field: "ownerAccount")
  spacesFollowed: [SpaceFollowers!] @derivedFrom(field: "followerAccount")
  followingSpacesCount: Int

  feeds: [NewsFeed]! @derivedFrom(field: "account")
  notifications: [Notification]! @derivedFrom(field: "account")
  activities: [Activity]! @derivedFrom(field: "account")
  reactions: [Reaction]! @derivedFrom(field: "account")
}

type Post @entity  {
  id: ID!
  parentPost: Post
  rootPost: Post
  sharedPost: Post
  isComment: Boolean! @index
  hidden: Boolean! @index

  createdByAccount: Account!
  createdAtBlock: BigInt
  createdAtTime: DateTime @index
  createdOnDay: DateTime
  updatedAtTime: DateTime
  space: Space!
  kind: PostKind @index

  postFollowers: [PostFollowers] @derivedFrom(field: "followingPost")
  commentFollowers: [CommentFollowers] @derivedFrom(field: "followingComment")
  followersCount: Int @index

  repliesCount: Int
  publicRepliesCount: Int @index
  hiddenRepliesCount: Int
  sharesCount: Int @index
  upvotesCount: Int @index
  downvotesCount: Int @index
  reactionsCount: Int @index
  reactions: [Reaction] @derivedFrom(field: "post")
  #  score: Int

  title: String
  content: String
  slug: String
  summary: String
  image: String
  canonical: String
  tagsOriginal: String

  proposalIndex: Int
}

type Reaction @entity {
  id: ID!
  post: Post!
  account: Account!
  kind: ReactionKind! @index
  status: Status! @index
  createdAtBlock: BigInt!
  createdAtTime: DateTime!
  updatedAtBlock: BigInt
  updatedAtTime: DateTime
}

type Space @entity {
  id: ID!
  createdByAccount: Account!
  ownerAccount: Account!

  createdAtBlock: BigInt
  createdAtTime: DateTime @index
  createdOnDay: DateTime
  updatedAtTime: DateTime
  updatedAtBlock: BigInt

  posts: [Post]! @derivedFrom(field: "space")
  postsCount: Int
  publicPostsCount: Int @index
  hiddenPostsCount: Int

  content: String
  name: String
  image: String
  summary: String
  tagsOriginal: String

  followersCount: Int @index
  followers: [SpaceFollowers]! @derivedFrom(field: "followingSpace")
}

type Activity @entity {
  id: ID!
  account: Account!
  blockNumber: BigInt!
  eventIndex: Int!
  event: EventName! @index
  followingAccount: Account
  space: Space
  spacePrev: Space
  post: Post
  reaction: Reaction
  date: DateTime!
  aggregated: Boolean @index
  aggCount: BigInt
}

type AccountFollowers @entity {
  followerAccount: Account!
  followingAccount: Account!
}

type SpaceFollowers @entity {
  followerAccount: Account!
  followingSpace: Space!
}

type PostFollowers @entity {
  followerAccount: Account!
  followingPost: Post!
}

type CommentFollowers @entity {
  followerAccount: Account!
  followingComment: Post!
}

type NewsFeed @entity {
  account: Account!
  activity: Activity!
}

type Notification @entity {
  account: Account!
  activity: Activity!
}

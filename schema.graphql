#enum EventName {
#  "Posts.PostCreated"
#  "Posts.PostDeleted"
#  "Posts.PostUpdated"
#  "Posts.PostShared"
#  "Posts.PostMoved"
#  "Reactions.PostReactionCreated"
#  "Reactions.PostReactionUpdated"
#  "Reactions.PostReactionDeleted"
#  "SpaceCreated"
#  "Spaces.SpaceUpdated"
#  "Spaces.SpaceFollowed"
#  "Spaces.SpaceUnfollowed"
#  "ProfileFollows.AccountFollowed"
#  "ProfileFollows.AccountUnfollowed"
#  "Profiles.ProfileCreated"
#  "Profiles.ProfileUpdated"
#}

enum EventName {
  PostCreated
  PostDeleted
  PostUpdated
  PostShared
  PostMoved
  PostReactionCreated
  PostReactionUpdated
  PostReactionDeleted
  SpaceCreated
  SpaceUpdated
  SpaceFollowed
  SpaceUnfollowed
  AccountFollowed
  AccountUnfollowed
  ProfileCreated
  ProfileUpdated
}

enum PostKind {
  Comment
  SharedPost
  RegularPost
}
enum ReactionKind {
  Upvote
  Downvote
}

enum Status {
  Active
  Deleted
}

type Account @entity {
  id: ID!
  reputation: Int
  hasProfile: Boolean
  name: String
  avatar: String
  about: String
  createdAtBlock: BigInt
  createdAtTime: DateTime

  followers: [AccountFollowers]! @derivedFrom(field: "followingAccount")
  followersCount: Int

  followingAccounts: [AccountFollowers]! @derivedFrom(field: "followerAccount")
  followingAccountsCount: Int

  posts: [Post] @derivedFrom(field: "createdByAccount")

  spacesCreated: [Space!] @derivedFrom(field: "createdByAccount")
  spacesOwned: [Space!] @derivedFrom(field: "ownerAccount")
  spacesFollowed: [SpaceFollowers!] @derivedFrom(field: "followerAccount")
  followingSpacesCount: Int

  feeds: [NewsFeed]! @derivedFrom(field: "account")
  notifications: [Notification]! @derivedFrom(field: "account")
  activities: [Activity]! @derivedFrom(field: "account")
  reactions: [Reaction]! @derivedFrom(field: "account")
}

type Post @entity {
  id: ID!
  parentPost: Post
  rootPost: Post
  sharedPost: Post
  isComment: Boolean!

  createdByAccount: Account!
  createdAtBlock: BigInt
  createdAtTime: DateTime
  createdOnDay: DateTime
  updatedAtTime: DateTime
  space: Space!
  kind: PostKind

  postFollowers: [PostFollowers] @derivedFrom(field: "followingPost")
  commentFollowers: [CommentFollowers] @derivedFrom(field: "followingComment")
  followersCount: Int

  repliesCount: Int
  publicRepliesCount: Int
  hiddenRepliesCount: Int
  sharesCount: Int
  upvotesCount: Int
  downvotesCount: Int
  reactionsCount: Int
  reactions: [Reaction] @derivedFrom(field: "post")
  #  score: Int

  title: String
  content: String
  slug: String
  summary: String
  image: String
  canonical: String
  tagsOriginal: String

  proposalIndex: Int
}

type Reaction @entity {
  id: ID!
  post: Post!
  account: Account!
  kind: ReactionKind!
  status: Status! @index
  createdAtBlock: BigInt!
  createdAtTime: DateTime!
  updatedAtBlock: BigInt
  updatedAtTime: DateTime
}

type Space @entity {
  id: ID!
  createdByAccount: Account!
  ownerAccount: Account!

  createdAtBlock: BigInt
  createdAtTime: DateTime
  createdOnDay: DateTime
  updatedAtTime: DateTime

  postsCount: Int
  publicPostsCount: Int
  hiddenPostsCount: Int
  score: Int

  content: String
  name: String
  image: String
  summary: String
  tagsOriginal: String

  followersCount: Int
  followers: [SpaceFollowers]! @derivedFrom(field: "followingSpace")
}

type Activity @entity {
  id: ID!
  account: Account!
  blockNumber: BigInt!
  eventIndex: Int!
  event: EventName!
  followingAccount: Account
  space: Space
  post: Post
  reaction: Reaction
  commentPost: Post
  commentParentPost: Post
  date: DateTime!
  aggregated: Boolean
  aggCount: BigInt
}

type AccountFollowers @entity {
  followerAccount: Account!
  followingAccount: Account!
}

type SpaceFollowers @entity {
  followerAccount: Account!
  followingSpace: Space!
}

type PostFollowers @entity {
  followerAccount: Account!
  followingPost: Post!
}

type CommentFollowers @entity {
  followerAccount: Account!
  followingComment: Post!
}

type NewsFeed @entity {
  account: Account!
  activity: Activity!
}

type Notification @entity {
  account: Account!
  activity: Activity!
}
